<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>John&#39;s Blog</title>
  
  <subtitle>不忘初心 方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.johnmai.top/"/>
  <updated>2019-05-13T12:11:09.851Z</updated>
  <id>https://blog.johnmai.top/</id>
  
  <author>
    <name>John Mai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何永久使用 ELK 白金段位</title>
    <link href="https://blog.johnmai.top/2019/05/13/%E5%A6%82%E4%BD%95%E6%B0%B8%E4%B9%85%E4%BD%BF%E7%94%A8-ELK-%E7%99%BD%E9%87%91%E6%AE%B5%E4%BD%8D/"/>
    <id>https://blog.johnmai.top/2019/05/13/如何永久使用-ELK-白金段位/</id>
    <published>2019-05-13T04:55:06.000Z</published>
    <updated>2019-05-13T12:11:09.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-070406.jpg" alt></p><h1 id="为啥要上白金段位"><a href="#为啥要上白金段位" class="headerlink" title="为啥要上白金段位"></a>为啥要上白金段位</h1><p>因为有些高级功能只有白金段位才会有，虽然一开始有30天的试用，但30天不够啊</p><a id="more"></a><p>如果不知道 ELK 是干啥的可以看看这个 <a href="/2019/05/12/搭建-ELK-7-x-日志分析平台/">搭建 ELK 7.x 日志分析平台</a></p><h1 id="开始爆破，上白金"><a href="#开始爆破，上白金" class="headerlink" title="开始爆破，上白金"></a>开始爆破，上白金</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先把 x-pack 拷贝出来</span></span><br><span class="line">sudo cp /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-7.0.1.jar ./</span><br><span class="line"><span class="comment"># 解压到x-pack-core目录</span></span><br><span class="line">unzip x-pack-core-7.0.1.jar -d x-pack-core</span><br></pre></td></tr></table></figure><p>下面我们需要一个 java 反编译工具，建议使用<code>luyten</code>（本人用过<code>jd-gui</code>和<code>jad</code>反编出来都有问题），找到 <code>org/elasticsearch/license/LicenseVerifier.class</code> 和 <code>org/elasticsearch/xpack/core/XPackBuild.class</code></p><p>反编译得到 <code>LicenseVerifier.java</code> 后，将里面的<code>verifyLicense</code>和<code>verifyLicense</code>方法改为如下内容，让许可的验证都返回<code>true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elasticsearch.license;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.bytes.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.core.internal.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LicenseVerifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyLicense</span><span class="params">(<span class="keyword">final</span> License license, <span class="keyword">final</span> <span class="keyword">byte</span>[] publicKeyData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyLicense</span><span class="params">(<span class="keyword">final</span> License license)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译得到 <code>XPackBuild.java</code> 后，将里面的 <code>if (path.toString().endsWith(&quot;.jar&quot;))</code> 那段语句注释或者删除掉，让程序检测不到jar包被修改过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elasticsearch.xpack.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XPackBuild</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> XPackBuild CURRENT;</span><br><span class="line">    <span class="keyword">private</span> String shortHash;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressForbidden</span>(reason = <span class="string">"looks up path of xpack.jar directly"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Path <span class="title">getElasticsearchCodebase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PathUtils.get(url.toURI());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (URISyntaxException bogus) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(bogus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    XPackBuild(<span class="keyword">final</span> String shortHash, <span class="keyword">final</span> String date) &#123;</span><br><span class="line">        <span class="keyword">this</span>.shortHash = shortHash;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.shortHash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Path path = getElasticsearchCodebase();</span><br><span class="line">        String shortHash = <span class="keyword">null</span>;</span><br><span class="line">        String date = <span class="keyword">null</span>;</span><br><span class="line">        Label_0109: &#123;</span><br><span class="line">            <span class="comment">// if (path.toString().endsWith(".jar")) &#123;</span></span><br><span class="line">            <span class="comment">//     try &#123;</span></span><br><span class="line">            <span class="comment">//         final JarInputStream jar = new JarInputStream(Files.newInputStream(path, new OpenOption[0]));</span></span><br><span class="line">            <span class="comment">//         try &#123;</span></span><br><span class="line">            <span class="comment">//             final Manifest manifest = jar.getManifest();</span></span><br><span class="line">            <span class="comment">//             shortHash = manifest.getMainAttributes().getValue("Change");</span></span><br><span class="line">            <span class="comment">//             date = manifest.getMainAttributes().getValue("Build-Date");</span></span><br><span class="line">            <span class="comment">//             jar.close();</span></span><br><span class="line">            <span class="comment">//         &#125;</span></span><br><span class="line">            <span class="comment">//         catch (Throwable t) &#123;</span></span><br><span class="line">            <span class="comment">//             try &#123;</span></span><br><span class="line">            <span class="comment">//                 jar.close();</span></span><br><span class="line">            <span class="comment">//             &#125;</span></span><br><span class="line">            <span class="comment">//             catch (Throwable t2) &#123;</span></span><br><span class="line">            <span class="comment">//                 t.addSuppressed(t2);</span></span><br><span class="line">            <span class="comment">//             &#125;</span></span><br><span class="line">            <span class="comment">//             throw t;</span></span><br><span class="line">            <span class="comment">//         &#125;</span></span><br><span class="line">            <span class="comment">//         break Label_0109;</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">//     catch (IOException e) &#123;</span></span><br><span class="line">            <span class="comment">//         throw new RuntimeException(e);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            shortHash = <span class="string">"Unknown"</span>;</span><br><span class="line">            date = <span class="string">"Unknown"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CURRENT = <span class="keyword">new</span> XPackBuild(shortHash, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意不要直接复制这些代码，修改仅供参考，有可能其他版本的代码会有点不一样，所以代码参考去改就好了</code></p><p>修改完后，把 <code>LicenseVerifier.java</code> 和 <code>XPackBuild.java</code> 重新编译<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac -cp <span class="string">"/usr/share/elasticsearch/lib/elasticsearch-7.0.1.jar:/usr/share/elasticsearch/lib/lucene-core-8.0.0.jar:/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-7.0.1.jar:/usr/share/elasticsearch/lib/elasticsearch-core-7.0.1.jar"</span> LicenseVerifier.java</span><br><span class="line"></span><br><span class="line">javac -cp <span class="string">"/usr/share/elasticsearch/lib/elasticsearch-7.0.1.jar:/usr/share/elasticsearch/lib/lucene-core-8.0.0.jar:/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-7.0.1.jar:/usr/share/elasticsearch/lib/elasticsearch-core-7.0.1.jar"</span> XPackBuild.java</span><br></pre></td></tr></table></figure></p><p><code>注意编译需要依赖这些包，所以请根据自己安装的版本去选择这包</code></p><p>编译完成后，将得到的 <code>LicenseVerifier.class</code> 和 <code>XPackBuild.class</code> 覆盖到 <code>org/elasticsearch/license/LicenseVerifier.class</code> 和 <code>org/elasticsearch/xpack/core/XPackBuild.class</code></p><p>最后重新打包jar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> x-pack-core</span><br><span class="line"><span class="comment"># 打包当前目录</span></span><br><span class="line">jar -cvf x-pack-core-7.0.1.jar ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包好之后 覆盖原来的jar包</span></span><br><span class="line">sudo cp x-pack-core-7.0.1.jar /usr/share/elasticsearch/modules/x-pack-core/</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo service elasticsearch restart</span><br></pre></td></tr></table></figure><p>去注册一个免费一年的License <a href="https://license.elastic.co/registration" target="_blank" rel="noopener">https://license.elastic.co/registration</a>，注册完成后会给你发送下载地址</p><p><img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-062752.png" alt></p><p>下载之后你会得到一个json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"license"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"basic"</span>,</span><br><span class="line">        <span class="attr">"issue_date_in_millis"</span>: <span class="number">1557705600000</span>,</span><br><span class="line">        <span class="attr">"expiry_date_in_millis"</span>: <span class="number">1589414399999</span>,</span><br><span class="line">        <span class="attr">"max_nodes"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">"issued_to"</span>: <span class="string">"~~~~~~~~~~~"</span>,</span><br><span class="line">        <span class="attr">"issuer"</span>: <span class="string">"Web Form"</span>,</span><br><span class="line">        <span class="attr">"signature"</span>: <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span>,</span><br><span class="line">        <span class="attr">"start_date_in_millis"</span>: <span class="number">1557705600000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>将<code>type</code>的参数改为<code>platinum</code>(即：‘白金版’)</li><li>将<code>expiry_date_in_millis</code> 的参数改成你想要的过期时间（这里用的是毫秒）可以改为<code>4070883661000</code>过期时间都是到2099年~~~</li><li>其他参数尽量不要改</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"license"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"platinum"</span>,</span><br><span class="line">        <span class="attr">"issue_date_in_millis"</span>: <span class="number">1557705600000</span>,</span><br><span class="line">        <span class="attr">"expiry_date_in_millis"</span>: <span class="number">4070883661000</span>,</span><br><span class="line">        <span class="attr">"max_nodes"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">"issued_to"</span>: <span class="string">"~~~~~~~~~~~"</span>,</span><br><span class="line">        <span class="attr">"issuer"</span>: <span class="string">"Web Form"</span>,</span><br><span class="line">        <span class="attr">"signature"</span>: <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span>,</span><br><span class="line">        <span class="attr">"start_date_in_millis"</span>: <span class="number">1557705600000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>/etc/elasticsearch/elasticsearch.yml</code> 暂时先关闭 <code>xpack</code> (记得重启elasticsearch)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">xpack.security.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>在 kibana 中 <code>管理 → 许可管理 → 更新许可</code><br><img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-063553.png" alt></p><p>修改 <code>/etc/elasticsearch/elasticsearch.yml</code> 重新打开 <code>xpack</code> (记得重启elasticsearch)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">xpack.security.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>更新后显示这样就ok了</p><p><img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-064147.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-070406.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;为啥要上白金段位&quot;&gt;&lt;a href=&quot;#为啥要上白金段位&quot; class=&quot;headerlink&quot; title=&quot;为啥要上白金段位&quot;&gt;&lt;/a&gt;为啥要上白金段位&lt;/h1&gt;&lt;p&gt;因为有些高级功能只有白金段位才会有，虽然一开始有30天的试用，但30天不够啊&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://blog.johnmai.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="ELK" scheme="https://blog.johnmai.top/tags/ELK/"/>
    
      <category term="Elasticsearch" scheme="https://blog.johnmai.top/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="https://blog.johnmai.top/tags/Kibana/"/>
    
      <category term="Logstash" scheme="https://blog.johnmai.top/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>搭建 ELK 7.x 日志分析平台</title>
    <link href="https://blog.johnmai.top/2019/05/12/%E6%90%AD%E5%BB%BA-ELK-7-x-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
    <id>https://blog.johnmai.top/2019/05/12/搭建-ELK-7-x-日志分析平台/</id>
    <published>2019-05-12T09:04:23.000Z</published>
    <updated>2019-05-13T07:28:36.712Z</updated>
    
    <content type="html"><![CDATA[<img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-12-IMG_3985_w21.png" title="alt:搭建 ELK 7.x 日志分析平台"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于公司项目众多，要对这么多项目日志进行巡查和监控，一个个去查，效率会比较低。因此需要一个对日志进行统一管理的工具。so 本人就采用了 ELK 方案。</p><h1 id="什么是-ELK-❓"><a href="#什么是-ELK-❓" class="headerlink" title="什么是 ELK ❓"></a>什么是 ELK ❓</h1><p>ELK 是由 Elasticsearch + Logstash + Kibana 这三个工具组成的一套开源日志监控、日志可视化管理的解决方案</p><a id="more"></a><h1 id="安装-⚙️"><a href="#安装-⚙️" class="headerlink" title="安装 ⚙️"></a>安装 ⚙️</h1><p>这里有两种安装方式，apt 常规安装 和 Docker 方式。本人在公司采用的是 apt 常规安装，自用的服务器是用 Docker 方式</p><h2 id="apt常规安装"><a href="#apt常规安装" class="headerlink" title="apt常规安装"></a>apt常规安装</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><blockquote><p>本文使用环境：<br>Ubuntu 16.04.4 LTS<br>Jdk 1.8.0_191<br>Elasticsearch 7.0.1<br>Kibana 7.0.1<br>Logstash 7.0.1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://artifacts.elastic.co/packages/7.x/apt stable main"</span> | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网的速度有点忙，想快点的话，这里可以换成国内镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://artifacts.elastic.co/packages/7.x/apt stable main"</span> | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list</span><br></pre></td></tr></table></figure><h3 id="安装-elasticsearch-kibana-logstash"><a href="#安装-elasticsearch-kibana-logstash" class="headerlink" title="安装 elasticsearch kibana logstash"></a>安装 elasticsearch kibana logstash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install elasticsearch kibana logstash</span><br></pre></td></tr></table></figure><p><code>注意：ELK 依赖 Java，务必安装好 Java。（ 本人之前用 Java 9 好像有点问题，如果用 Java 9 也遇到问题，可以尝试改为Java 8 ）</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先配置一下 elasticsearch</p><p><code>/etc/elasticsearch/elasticsearch.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">cluster.initial_master_nodes:</span> <span class="string">["node-1"]</span></span><br></pre></td></tr></table></figure></p><p>接着配置一下 kibana</p><p><code>/etc/kibana/kibana.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="string">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">elasticsearch.hosts:</span> <span class="string">["http://127.0.0.1:9200"]</span></span><br><span class="line"><span class="comment"># 可以使用中文</span></span><br><span class="line"><span class="string">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure></p><p>最后重启一下 elasticsearch &amp; kibana</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service elasticsearch restart</span><br><span class="line">sudo service kibana restart</span><br></pre></td></tr></table></figure><p>最后访问一下 <a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a> 能进入到 kibana 就OK了</p><p><img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-12-140045.png" alt></p><h2 id="Docker-方式"><a href="#Docker-方式" class="headerlink" title="Docker 方式"></a>Docker 方式</h2><p>这里我是用 <a href="https://github.com/deviantony" target="_blank" rel="noopener">deviantony</a> 编写好的 <code>docker-composer</code> 脚本 <a href="https://github.com/deviantony/docker-elk" target="_blank" rel="noopener">docker-elk</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/deviantony/docker-elk.git</span><br><span class="line"><span class="built_in">cd</span> docker-elk</span><br><span class="line">docker-composer up -d</span><br></pre></td></tr></table></figure><p>等docker构建完，就可以访问 <a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a></p><h1 id="开启用户管理"><a href="#开启用户管理" class="headerlink" title="开启用户管理"></a>开启用户管理</h1><p>因为 ELK 是没有登录，用户管理等功能，所以我们要开启 <code>x-pack</code> 。</p><ol><li><p>由于 <code>x-pack</code> 是付费功能，在 kibana 中 <code>管理 → 许可管理</code><br> <img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-024734.png" alt></p></li><li><p>在<code>/etc/elasticsearch/elasticsearch.yml</code>添加<code>xpack.security.enabled: true</code>。添加完后记得重启<code>sudo service elasticsearch restart</code></p></li><li><p>设置密码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个是手动设置密码</span></span><br><span class="line">sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive</span><br><span class="line"><span class="comment"># 如果不想手动设置密码，也可以使用自动设置</span></span><br><span class="line">sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></table></figure></li><li><p>设置好密码后，在<code>/etc/kibana/kibana.yml</code>添加。（添加好后记得重启kibana <code>sudo service kibana restart</code>）</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">elasticsearch.username:</span> <span class="string">"elastic"</span></span><br><span class="line"><span class="string">elasticsearch.password:</span> <span class="string">"这里填写你设置的密码"</span></span><br></pre></td></tr></table></figure></li><li><p>最后访问 <a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a><br> <img src="https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-13-031721.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://john-blog-1251248233.cos.ap-guangzhou.myqcloud.com/2019-05-12-IMG_3985_w21.png&quot; title=&quot;alt:搭建 ELK 7.x 日志分析平台&quot;&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于公司项目众多，要对这么多项目日志进行巡查和监控，一个个去查，效率会比较低。因此需要一个对日志进行统一管理的工具。so 本人就采用了 ELK 方案。&lt;/p&gt;
&lt;h1 id=&quot;什么是-ELK-❓&quot;&gt;&lt;a href=&quot;#什么是-ELK-❓&quot; class=&quot;headerlink&quot; title=&quot;什么是 ELK ❓&quot;&gt;&lt;/a&gt;什么是 ELK ❓&lt;/h1&gt;&lt;p&gt;ELK 是由 Elasticsearch + Logstash + Kibana 这三个工具组成的一套开源日志监控、日志可视化管理的解决方案&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://blog.johnmai.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="ELK" scheme="https://blog.johnmai.top/tags/ELK/"/>
    
      <category term="Elasticsearch" scheme="https://blog.johnmai.top/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="https://blog.johnmai.top/tags/Kibana/"/>
    
      <category term="Logstash" scheme="https://blog.johnmai.top/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>如何在 ionic 3 中使用 URL Scheme</title>
    <link href="https://blog.johnmai.top/2018/02/03/%E5%A6%82%E4%BD%95%E5%9C%A8-ionic-3-%E4%B8%AD%E4%BD%BF%E7%94%A8-URL-Scheme/"/>
    <id>https://blog.johnmai.top/2018/02/03/如何在-ionic-3-中使用-URL-Scheme/</id>
    <published>2018-02-03T07:29:07.000Z</published>
    <updated>2019-05-13T07:29:11.317Z</updated>
    
    <content type="html"><![CDATA[<img src="https://user-gold-cdn.xitu.io/2018/2/3/16157498aa157d6d?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1" title="alt:如何在 ionic 3 中使用 URL Scheme"><h3 id="虾扯蛋🥚"><a href="#虾扯蛋🥚" class="headerlink" title="虾扯蛋🥚"></a>虾扯蛋🥚</h3><p>第一次在掘金写东西，有点紧张。</p><p>我为啥写这个，是因为我最近用 ionic 开发一个 app ，需要用 URL Scheme 。搞这个 URL Scheme 折腾了一下，所以写下此文，并分享给需要的朋友。😝</p><h3 id="什么是-URL-Scheme❓"><a href="#什么是-URL-Scheme❓" class="headerlink" title="什么是 URL Scheme❓"></a>什么是 URL Scheme❓</h3><p>简单的说，URL Scheme就是一个可以让app相互之间可以跳转的协议。列如：微信的 URL Scheme 就是 <code>weixin://</code>，在浏览器中打开 <code>weixin://scanqrcode</code> 可以跳转到微信的扫一扫功能。</p><a id="more"></a><p><img width="49%" src="https://user-gold-cdn.xitu.io/2018/2/3/16157617ac06adaa?w=750&h=1334&f=png&s=163774"><br><img width="49%" src="https://user-gold-cdn.xitu.io/2018/2/3/1615762402b6bbb8?w=750&h=1334&f=png&s=2249094"></p><blockquote><p>更多 URL Scheme ：<a href="https://www.zhihu.com/question/19907735" target="_blank" rel="noopener">https://www.zhihu.com/question/19907735</a></p></blockquote><h2 id="开始撸代码-💻"><a href="#开始撸代码-💻" class="headerlink" title="开始撸代码 💻"></a>开始撸代码 💻</h2><h3 id="构建demo-🐒"><a href="#构建demo-🐒" class="headerlink" title="构建demo 🐒"></a>构建demo 🐒</h3><p>我们就用ionic的tabs模板构建一个demo吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp tabs</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/2/3/161576df71181cb6?w=1604&amp;h=978&amp;f=png&amp;s=1293904" alt></p><h3 id="安装-URL-Scheme-Cordova-插件-🔧"><a href="#安装-URL-Scheme-Cordova-插件-🔧" class="headerlink" title="安装 URL Scheme Cordova 插件 🔧"></a>安装 URL Scheme Cordova 插件 🔧</h3><p>我们需要的安装的 URL Scheme Cordova 插件是<code>cordova-plugin-customurlscheme</code></p><p>插件地址：<a href="https://github.com/EddyVerbruggen/Custom-URL-scheme" target="_blank" rel="noopener">https://github.com/EddyVerbruggen/Custom-URL-scheme</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova plugin add cordova-plugin-customurlscheme --variable URL_SCHEME=myapp-mak</span><br></pre></td></tr></table></figure><p>在根目录使用此命令进行安装,<code>URL_SCHEME=myapp-mak</code>我定义的协议名称是<code>myapp-mak</code>。名称随便起，只要不跟其他app冲突就好。😝</p><blockquote><p>如果安装后想修改协议名称的，可以去改config.xml和package.json。打开就能看到之前定义的协议名称了</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/2/3/161576e602dd4f31?w=1604&amp;h=978&amp;f=png&amp;s=1355825" alt></p><h3 id="编译安装app到手机上📱"><a href="#编译安装app到手机上📱" class="headerlink" title="编译安装app到手机上📱"></a>编译安装app到手机上📱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova run ios</span><br></pre></td></tr></table></figure><p>编译安装完成后，可以通过这个协议<code>myapp-mak://随便写</code>打开此app。如：在浏览器打开<code>myapp-mak://test</code></p><h3 id="如何知道是哪个URL打开的App❓"><a href="#如何知道是哪个URL打开的App❓" class="headerlink" title="如何知道是哪个URL打开的App❓"></a>如何知道是哪个URL打开的App❓</h3><ul><li>获取url<br><img src="https://user-gold-cdn.xitu.io/2018/2/3/1615777ec59a311b?w=2492&amp;h=1468&amp;f=png&amp;s=396086" alt></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取url并显示在页面上</span><br><span class="line">(window as any).handleOpenURL = (url: string) =&gt; &#123;</span><br><span class="line">  console.log(url);</span><br><span class="line">  this.url = url;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这句代码是获取是哪个URL打开的app了。</p><blockquote><p>注意：handleOpenURL函数必须是全局唯一，否则无法正常接收</p></blockquote><ul><li>修改config.xml</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/2/3/161577f051bab113?w=2492&amp;h=1468&amp;f=png&amp;s=721702" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;allow-intent href=&quot;myapp-mak:*&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这里必须写上这句话，这句是允许我们定义的协议可以传递。否则handleOpenURL也无法接收到URL</p><h3 id="测试-⚙"><a href="#测试-⚙" class="headerlink" title="测试 ⚙"></a>测试 ⚙</h3><ol><li>重新编译安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova run ios</span><br></pre></td></tr></table></figure><ol start="2"><li>在浏览器打开<code>myapp-mak://test</code></li></ol><p><img width="49%" src="https://user-gold-cdn.xitu.io/2018/2/3/1615783f058b6059?w=750&h=1334&f=png&s=161970"><br><img width="49%" src="https://user-gold-cdn.xitu.io/2018/2/3/161578612114f365?w=750&h=1334&f=png&s=114825"></p><blockquote><p>获取URL有啥作用呢？获取URL之后，我们可以判断URL的不同进行不同的操作，例如：打开指定页面、分享、支付……</p></blockquote><h3 id="结束-😁"><a href="#结束-😁" class="headerlink" title="结束 😁"></a>结束 😁</h3><p>第一次写文，写得不是很好。😜</p><p>除了通过URL Scheme方式来打开app。其实可以使用Universal Links &amp;&amp; Deep Linking 来打开app。</p><blockquote><p>分享一个 Universal Links &amp;&amp; Deep Linking Cordova 插件给大家<a href="https://github.com/nordnet/cordova-universal-links-plugin" target="_blank" rel="noopener">https://github.com/nordnet/cordova-universal-links-plugin</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/3/16157498aa157d6d?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1&quot; title=&quot;alt:如何在 ionic 3 中使用 URL Scheme&quot;&gt;
&lt;h3 id=&quot;虾扯蛋🥚&quot;&gt;&lt;a href=&quot;#虾扯蛋🥚&quot; class=&quot;headerlink&quot; title=&quot;虾扯蛋🥚&quot;&gt;&lt;/a&gt;虾扯蛋🥚&lt;/h3&gt;&lt;p&gt;第一次在掘金写东西，有点紧张。&lt;/p&gt;
&lt;p&gt;我为啥写这个，是因为我最近用 ionic 开发一个 app ，需要用 URL Scheme 。搞这个 URL Scheme 折腾了一下，所以写下此文，并分享给需要的朋友。😝&lt;/p&gt;
&lt;h3 id=&quot;什么是-URL-Scheme❓&quot;&gt;&lt;a href=&quot;#什么是-URL-Scheme❓&quot; class=&quot;headerlink&quot; title=&quot;什么是 URL Scheme❓&quot;&gt;&lt;/a&gt;什么是 URL Scheme❓&lt;/h3&gt;&lt;p&gt;简单的说，URL Scheme就是一个可以让app相互之间可以跳转的协议。列如：微信的 URL Scheme 就是 &lt;code&gt;weixin://&lt;/code&gt;，在浏览器中打开 &lt;code&gt;weixin://scanqrcode&lt;/code&gt; 可以跳转到微信的扫一扫功能。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.johnmai.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Ionic" scheme="https://blog.johnmai.top/tags/Ionic/"/>
    
      <category term="JavaScript" scheme="https://blog.johnmai.top/tags/JavaScript/"/>
    
      <category term="Angular" scheme="https://blog.johnmai.top/tags/Angular/"/>
    
      <category term="Android" scheme="https://blog.johnmai.top/tags/Android/"/>
    
      <category term="IOS" scheme="https://blog.johnmai.top/tags/IOS/"/>
    
      <category term="App" scheme="https://blog.johnmai.top/tags/App/"/>
    
  </entry>
  
</feed>
